#!/usr/bin/env bash
# this file contains local changes to .bashrc

# os specific options
case "$(uname)" in
Darwin*)
    ls_colors='-G'
    ;;
Linux*)
    ls_colors='--color=auto'
    ;;
esac

# aliases
alias ls="$(which ls) ${ls_colors}"
alias ll="ls -lF"
alias la="ls -A"
alias l="ls -F"

alias grep="grep --color=auto -E"
alias rgrep="grep -RHn"
alias fgrep="grep -F"


export EDITOR=vim

if [[ -d $HOME/bin ]]; then
    PATH=$PATH:$HOME/bin
fi

if [[ $(uname) == "Darwin" ]]; then
    source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-completion.bash
    source /Applications/Xcode.app/Contents/Developer/usr/share/git-core/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=true
    GIT_PS1_DESCRIBE_STYLE=branch
fi

if [[ $(type -t __git_ps1) != function ]]; then
    function __git_ps1 {
        echo ""
    }
fi

# fancy color prompt and window title
PS1="\[$(tput setaf 1)\]\h\[$(tput setaf 7)\]:\[$(tput bold)\]\[$(tput setaf 7)\]\W\[$(tput sgr0)\]\$(__git_ps1 "[%s]") \u\[$(tput setaf 7)\]\$ \[$(tput sgr0)\]"
PS1="\[\e]0;[\h] \w\a\]$PS1"

# set any containing tmux titles to the hostname (for nested ssh sessions)
if [[ $TERM != "linux" ]]; then
    PROMPT_COMMAND='echo -ne "\033k$(hostname)\033\\"'
fi

# screen/tmux specific features
if [[ $TERM == screen* && ! -z $TMUX ]]; then
    # simpler prompt, since details are already in the status
    # also set xterm title to working dir
    prompt_color=5
    [[ $EUID == 0 ]] && prompt_color=1
    PS1="\[$(tput setaf 0)\]\W \[$(tput setaf $prompt_color)\]%\[$(tput sgr0)\] "
    PS1="\[\e]0;\w\a\]$PS1"
    PROMPT_COMMAND="tmux set-window-option automatic-rename on >/dev/null"
    unset prompt_color
fi

#################################################
## Helper Functions
#################################################


# see https://stackoverflow.com/questions/9376904/find-file-by-name-up-the-directory-tree-using-bash
dnif () {
    # Recursively list a file from PWD up the directory tree to root
    [[ -n "$1" ]] || { echo "Recursively list a file from PWD up the directory tree to root"; echo -e "Usage:\n\tdnif [ls-opts] name"; return 1; }
    local THERE="$PWD" RC=2
    local lsopts="$1" target="$2"
    [[ -z "$target" ]] && { target="$lsopts"; lsopts=""; }

    while [[ $THERE != / ]]
        do [[ -e "$THERE/$target" ]] && { command ls $lsopts "$THERE/$target"; RC=0; }
            THERE=$(command dirname "$THERE")
        done
    [[ -e "$THERE/$target" ]] && { command ls $lsopts "/$target"; RC=0; }
    return $RC
}

cd () {
    builtin cd "$@" || { return $?; }

    # entering a new gopath
    if [[ -z "$GOPATH" ]] || [[ "$PWD"/ != "$GOPATH"/* ]]; then
        gopath_marker=$(dnif .gopath)
        if [[ -n "$gopath_marker" ]]; then
            # remove existing GOPATH/bin from PATH
            [[ -n "$GOPATH" ]] && { PATH="${PATH##$GOPATH/bin:}"; }

            export GOPATH=$(dirname "$gopath_marker")
            PATH="$GOPATH/bin:$PATH"

            [[ -z $__silent_gopath ]] && echo "[GO] Configured GOPATH=$GOPATH"
        fi
    fi

    return $rv
}

__silent_gopath=1
cd .
unset __silent_gopath
