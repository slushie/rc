syntax on

"vundle seems simpler to start
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'pangloss/vim-javascript'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tmux-plugins/vim-tmux'

" addons
fun SetupVAM()
    " YES, you can customize this vam_install_path path and everything still works!
    let vam_install_path = expand('$HOME') . '/.vim/addons'
    exec 'set runtimepath+='.vam_install_path.'/vim-addon-manager'

    " * unix based os users may want to use this code checking out VAM
    " * windows users want to use http://mawercer.de/~marc/vam/index.php
    "   to fetch VAM, VAM-known-repositories and the listed plugins
    "   without having to install curl, unzip, git tool chain first
    " -> BUG [4] (git-less installation)
    if !filereadable(vam_install_path.'/vim-addon-manager/.git/config') && 1 == confirm("git clone VAM into ".vam_install_path."?","&Y\n&N")
    " I'm sorry having to add this reminder. Eventually it'll pay off.
    call confirm("Remind yourself that most plugins ship with documentation (README*, doc/*.txt). Its your first source of knowledge. If you can't find the info you're looking for in reasonable time ask maintainers to improve documentation")
    exec '!p='.shellescape(vam_install_path).'; mkdir -p "$p" && cd "$p" && git clone --depth 1 git://github.com/MarcWeber/vim-addon-manager.git'
    " VAM run helptags automatically if you install or update plugins
    exec 'helptags '.fnameescape(vam_install_path.'/vim-addon-manager/doc')
    endif

    " Example drop git sources unless git is in PATH. Same plugins can
    " be installed form www.vim.org. Lookup MergeSources to get more control
    " let g:vim_addon_manager['drop_git_sources'] = !executable('git')

    call vam#ActivateAddons(['The_NERD_tree','taglist','Solarized'], {'auto_install' : 0})
    " sample: call vam#ActivateAddons(['pluginA','pluginB', ...], {'auto_install' : 0})
    " where 'pluginA' could be "git://" "github:YourName" or "snipmate-snippets" see vam#install#RewriteName()
    " also see section "5. Installing plugins" in VAM's documentation
    " which will tell you how to find the plugin names of a plugin
    endf
call SetupVAM()

" gui-only stuff in here
if has("gui_running")
  set guioptions-=T
  "set gfn=Monospace\ 9
  "set gfn=Consolas:h10
  set gfn=Envy\ Code\ R:h13
  set lines=40
  set columns=100
  "colors navajo-night
  set bg=light
  colors solarized
else
  colors zellner
  set mouse=a
  set background=dark
endif

set noea
set ls=2
set scrolloff=3
set nobackup
set nocompatible
set ruler
set nohls
set incsearch
set showmatch
set history=50
set wildmode=list:longest,full
set showmode
set showcmd
set nowrap
set shiftwidth=4
set shiftround
set expandtab
set tabstop=4
set comments=sr:/*,mb:*,ex:*/
"set comments+=s:/*,mb:**,ex:*/
set comments+=fb:*
set backspace=eol,start,indent

filetype on
filetype plugin on
filetype indent on

" fix shitty ai 'feature'
"set autoindent
inoremap # X#

" perl-support support
let g:Perl_AuthorName        = 'Josh Leder'
let g:Perl_AuthorRef         = 'slushie'
let g:Perl_Email             = 'slushie@gmail.com'
let g:Perl_NoInsertMappings  = 1
let g:Perl_XtermDefaults     = '-fa monospace -fs 7 -geometry 80x30'
let g:Perl_OutputGvim        = 'xterm'

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'
let g:Tex_DefaultTargetFormat='pdf'

" general ctags support
nnoremap <silent> <C-F11>  <Esc><Esc>:TlistToggle<CR>
inoremap <silent> <C-F11>  <C-O>:TlistToggle<CR>
"let Tlist_Perl_Settings      = 'perl;c:constants;l:labels;p:package;s:subroutines;d:POD'
let g:Tlist_Use_Right_Window   = 1
let g:Tlist_WinWidth           = 30
let g:Tlist_Inc_Winwidth       = 1
let g:Tlist_Show_Menu          = 1
let g:Tlist_Show_One_File      = 1

" c++
"ActivateAddon OmniCppComplete
set tags+=~/Library/ctags/cpp
set tags+=~/Library/ctags/libev
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview


" folding hotness
"syn region braceFold start="{" end="}" transparent fold
let php_folding = 1
let perl_fold = 1
set foldmethod=syntax

let perl_sync_dist=10
let perl_sync_method="minlines=10"

" handle readonly mode -- dont save or load vim views, always open folds
if !&ro
	au BufWinLeave * silent! mkview
	au BufWinEnter * silent! loadview
else
	au BufWinEnter * silent! normal zR
endif

autocmd FileType ruby set sw=2 ts=2

" for C-like programming, have automatic indentation:
autocmd FileType c,cpp,slang set cindent

" for actual C (php, and C++ etc) programming where comments have explicit end
" characters, if starting a new line in the middle of a comment automatically
" insert the comment leader characters:
autocmd FileType c,php,cpp,javascript set formatoptions+=ro

" for some reason php has fucked up comment support
autocmd FileType php set comments=sr:/*,mb:*,ex:*/

" for brace-based languages, have things in braces indenting themselves:
" (there are plugins that work better but im lazy)
autocmd FileType perl set smartindent
autocmd FileType php set smartindent
autocmd FileType javascript set smartindent
autocmd FileType scala set ai si ts=2 sw=2

" for CSS, also have things in braces indented:
autocmd FileType css set smartindent

" for HTML, generally format text, but if a long line has been created leave it
" alone when editing:
autocmd FileType html set formatoptions+=tl

" for both CSS and HTML, use genuine tab characters for indentation, to make
" files a few bytes smaller:
"autocmd FileType html,css set noexpandtab tabstop=2

" in makefiles, don't expand tabs to spaces, since actual tab characters are
" needed, and have indentation at 8 chars to be sure that all indents are tabs
" (despite the mappings later):
autocmd FileType make set noexpandtab shiftwidth=8

" layout languages want always-expanded tabs
autocmd FileType haskell,python set expandtab shiftwidth=2 tabstop=2

" default to pdflatex for tex files
autocmd FileType tex compiler tex

set whichwrap=h,l,~,[,]

" use <F6> to cycle through split windows (and <Shift>+<F6> to cycle backwards,
" where possible):
nnoremap <F6> <C-W>w
nnoremap <S-F6> <C-W>W

" have the usual indentation keystrokes still work in visual mode:
vnoremap <C-T> >
vnoremap <C-D> <LT>
"vmap <Tab> <C-T>
"vmap <S-Tab> <C-D>

" have <Tab> (and <Shift>+<Tab> where it works) change the level of
" indentation:
"inoremap <Tab> <C-T>
"inoremap <S-Tab> <C-D>

" some useful maps for insert mode
if has("gui_running")
  " save
  inoremap <C-S> <C-O>:w<CR>
else
  " avoid ctrl-s for flow control
  inoremap <C-R> <C-O>:w<CR>
  " ctrl-arrows moves word in aterm
  inoremap <C-[>Od <C-O>b
  inoremap <C-[>Oc <C-O>w
endif

" tmux support
" tell vim that the terminal supports titles
" see http://stackoverflow.com/questions/23269294/how-to-set-window-title-from-vim-in-tmux-window
if &term == "screen" || &term == "screen-256color"
  set t_ts=k

  " see http://stackoverflow.com/questions/15123477/tmux-tabs-with-name-of-file-open-in-vim
  autocmd BufEnter * let &titlestring = expand("%:t")
  set title
endif
